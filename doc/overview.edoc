@author Louis-Philippe Gauthier
@doc Lightweight Distributed Stream Processor

[![Build Status](https://travis-ci.org/lpgauth/swirl.svg?branch=master)](https://travis-ci.org/lpgauth/swirl)

#### Requirements: ####
- Erlang 17.0+

#### Examples: ####

##### Starting a flow: #####

<pre lang="erlang">ok = application:start(swirl),

FlowMod = swirl_flow_example,
FlowOpts = [
    {stream_names, [delivery]},
    {stream_filter, "exchange_id = 3 AND bidder_id IS NOT NULL"}
],
MapperNodes = [node()],
ReducerNode = node(),
{ok, Flow} = swirl_flow:start(FlowMod, FlowOpts, MapperNodes, ReducerNode),

swirl_stream:emit(delivery, #{exchange_id => 1, bidder_id => 10}),

ok = swirl_flow:stop(Flow)</pre>

##### Implementing a flow: #####

<pre lang="erlang">-module(swirl_flow_example).
-include_lib("swirl/include/swirl.hrl").

-behavior(swirl_flow).
-export([
    map/3,
    reduce/3,
    output/4
]).

%% swirl_flow callbacks
map(StreamName, Event, _MapperOpts) ->
    Type = ?LM(type, Event),
    ExchangeId = ?LM(exchange_id, Event),
    BidderId = ?LM(bidder_id, Event),

    Key = {Type, StreamName, ExchangeId, BidderId},
    CounterIncrements = {1, 10},

    {Key, CounterIncrements}.

reduce(_Flow, Row, _ReducerOpts) ->
    Row.

output(_Flow, _Period, Rows, OutputOpts) ->
    %% do something with the output
    io:format("rows: ~p~n", [Rows]),
    </pre>

#### Stream Filter: ####

##### Examples: #####
<pre lang="erlang">
exchange_id = 3 AND bidder_id IS NOT NULL
flight_id in (10, 12, 23) OR tag_id = 20
buyer_id notnull AND seller_id > 103</pre>

##### Swirl QL: #####
Variables:
<pre>atom()</pre>

Values:
<pre>integer() | float() | binary()</pre>

Boolean Operators:
<pre>'and' | 'or'</pre>

Comparison Operators:
<pre><![CDATA['<' | '<=' | '=' | '>=' | '>' | '<>']]></pre>

Inclusion Operators:
<pre>in | notin</pre>

Null Operators:
<pre>null | notnull</pre>

#### Resource Limitation: ####

configurable via:

<pre lang="erlang">application:set_env(swirl, mappers_max, 140)
application:set_env(swirl, reducers_max, 200)</pre>

#### TODO: ####

- node discovery
- boolean expression indexing

@end