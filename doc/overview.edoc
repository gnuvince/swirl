@author Louis-Philippe Gauthier
@doc Lightweight Distributed Stream Processor

[![Build Status](https://travis-ci.org/lpgauth/swirl.svg?branch=master)](https://travis-ci.org/lpgauth/swirl)

#### Requirements: ####
- Erlang 17.0+

#### Examples: ####

##### Starting a flow: #####

<pre lang="erlang">ok = application:start(swirl),

FlowMod = swirl_flow_example,
FlowOpts = [
    {stream_names, [delivery]},
    {stream_filter, "exchange_id = 3 AND bidder_id IS NOT NULL"}
],
MapperNodes = [node()],
ReducerNode = node(),
{ok, Flow} = swirl_flow:start(FlowMod, FlowOpts, MapperNodes, ReducerNode),

swirl_stream:emit(delivery, #{exchange_id => 1, bidder_id => 10}),

ok = swirl_flow:stop(Flow)</pre>

##### Implementing a flow: #####

<pre lang="erlang">module(swirl_flow_example).

-behavior(swirl_flow).
-export([
    map/3,
    reduce/3,
    output/4
]).

%% swirl_flow callbacks
map(_StreamName, Event, _MapperOpts) ->
    {{lm(type, Event), lm(exchange_id, Event), lm(bidder_id, Event)}, {1, 10}}.

reduce(_Flow, Row, _ReducerOpts) ->
    Row.

output(_Flow, _Period, Rows, OutputOpts) ->
    case l(send_to , OutputOpts) of
        undefined -> ok;
        Pid -> Pid ! Rows
    end.

%% helpers
l(Key, Event) ->
    swirl_utils:lookup(Key, Event, undefined).

lm(Key, Event) ->
    maps:get(Key, Event, undefined).</pre>

#### Stream Filter: ####

##### Examples: #####
<pre lang="erlang">
exchange_id = 3 AND bidder_id IS NOT NULL
flight_id in (10, 12, 23) OR tag_id = 20
buyer_id notnull AND seller_id > 103</pre>

##### Variables: #####
<pre lang="erlang">
atom()</pre>

##### Values: #####

<pre lang="erlang">
integer() | float() | binary()</pre>

##### Boolean Operators: #####
<pre lang="erlang">
'and' | 'or'</pre>

##### Comparison Operators: #####
<pre lang="erlang">
<![CDATA['<' | '<=' | '=' | '>=' | '>' | '<>']]></pre>

##### Inclusion Operators: #####
<pre lang="erlang">
in | notin</pre>

##### Null Operators: #####
<pre lang="erlang">
null | notnull</pre>

#### Resource Limitation: ####

configurable via:

<pre lang="erlang">application:set_env(swirl, mappers_max, 140)
application:set_env(swirl, reducers_max, 200)</pre>

#### TODO: ####

- node discovery
- boolean expression indexing

@end